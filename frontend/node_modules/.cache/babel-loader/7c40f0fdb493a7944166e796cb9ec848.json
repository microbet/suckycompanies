{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\jayne\\\\dafuckisthis\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\jayne\\\\dafuckisthis\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\jayne\\\\dafuckisthis\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\jayne\\\\dafuckisthis\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\jayne\\\\dafuckisthis\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\jayne\\\\dafuckisthis\\\\frontend\\\\src\\\\components\\\\Answers.js\";\nimport React, { Component } from 'react';\nimport './MainPic.css'; // import User from '../User';\n\nvar Answers =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Answers, _Component);\n\n  function Answers(props) {\n    var _this;\n\n    _classCallCheck(this, Answers);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Answers).call(this, props)); //  var user = new User();\n\n    _this.handleUlClick = function (event) {\n      if (_this.props.user.userId) {\n        var fd = new FormData();\n        fd.append('answer_id', event.target.getAttribute('thisanswerid'));\n        fd.append('vote', event.target.getAttribute('vote'));\n        fd.append('user_id', _this.props.user.userId);\n        fd.append('sessionvalue', _this.props.user.sessionvalue);\n        fetch(_this.props.DATA_URI + '/vote', {\n          method: 'POST',\n          headers: {\n            'Accept': 'application/json'\n          },\n          credentials: 'same-origin',\n          body: fd\n        }).then(function (response) {\n          return response.json();\n        }).then(function (data) {\n          _this.buildBatch(data['answer_id'], data['up'], data['down']);\n        }).catch(function (error) {\n          console.log(\"error: \", error);\n        });\n      }\n    };\n\n    _this.buildBatch = function (answerId, up, down) {\n      var i = 0;\n      var tempArr = _this.state.answerBatch;\n\n      _this.state.answerBatch.forEach(function (element) {\n        if (element[1] === parseInt(answerId)) {\n          tempArr[i][2] = up;\n          tempArr[i][3] = down;\n        }\n\n        i++;\n      });\n\n      _this.setState({\n        answerBatch: tempArr\n      });\n    };\n\n    _this.handleScroll = function (event) {\n      if (document.getElementById('answerBox').scrollHeight - document.getElementById('answerBox').offsetHeight === document.getElementById('answerBox').scrollTop) {\n        _this.fetchAnswer(_this.state.oldestAnswerId, _this.props.image.imageId, 'next');\n      } else if (document.getElementById('answerBox').scrollTop === 0) {\n        _this.fetchAnswer(_this.state.newestAnswerId, _this.props.image.imageId, 'previous');\n      } else {\n        clearInterval(_this.timer);\n\n        _this.setState({\n          scrollTimer: true\n        });\n      }\n    };\n\n    _this.state = {\n      answerBatch: [],\n      // [ [answer, answerId, up, down], ... ]\n      oldestAnswerId: 0,\n      newestAnswerId: 0,\n      mostVotedAnswerBatch: 0,\n      most: 'netUp',\n      scrollTimer: true //  userId : this.props.user.userId,\n\n    };\n    return _this;\n  }\n\n  _createClass(Answers, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //    document.getElementById('answerBox').addEventListener('scroll', this.handleScroll);\n      // if (this.props.image.imageId) {\n      // did this happen and with what image id when you first hit most answered\n      //  console.log(\"what imageid = \", this.props.image.imageId);\n      this.fetchData();\n      this.fetchMost(this.state.most); // }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.timer); //   ReactDOM.findDOMNode(this).addEventListener('scroll', this.handleScroll);\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(answerToggle) {\n      if (this.props.image.imageId) {\n        this.fetchData();\n        this.fetchMost(this.state.most); // this should probably be set in state\n      }\n    }\n  }, {\n    key: \"fetchMost\",\n    value: function fetchMost(type) {\n      var _this2 = this;\n\n      var endpoint;\n\n      if (type === 'netUp') {\n        endpoint = '/get_most_net_upvoted';\n      }\n\n      if (type === 'netDown') {\n        endpoint = '/get_most_net_downvoted';\n      }\n\n      if (type === 'mostUp') {\n        endpoint = '/get_most_upvoted';\n      }\n\n      if (type === 'mostDown') {\n        endpoint = '/get_most_downvoted';\n      }\n\n      if (type === 'most') {\n        endpoint = '/get_most_voted';\n      }\n\n      var retArr = [];\n      fetch(this.props.DATA_URI + endpoint + \"?imageId=\" + this.props.image.imageId, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        },\n        credentials: 'same-origin'\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        data.forEach(function (element) {\n          retArr.push([element['answer'], element['answerId'], element['up'], element['down']]);\n        }); //  this.setState( { mostVotedAnswerBatch : retArr } )\n\n        _this2.setState({\n          answerBatch: retArr\n        });\n      }).catch(function (error) {\n        console.log(\"error: \", error);\n      });\n    }\n  }, {\n    key: \"fetchData\",\n    value: function fetchData() {\n      var _this3 = this;\n\n      this.clearNextPrevBackground();\n      var retArr = [];\n      fetch(this.props.DATA_URI + \"/get_answers?imageId=\" + this.props.image.imageId + \"&answerId=\" + 0, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        },\n        credentials: \"same-origin\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        var thisOldAnswerId = 0;\n        var thisNewAnswerId = 0;\n        data.forEach(function (element) {\n          retArr.push([element['answer'], element['answerId'], element['up'], element['down']]);\n\n          if (thisOldAnswerId === 0) {\n            thisOldAnswerId = element['answerId'];\n            thisNewAnswerId = element['answerId'];\n          } else {\n            if (element['answerId'] < thisOldAnswerId) {\n              thisOldAnswerId = element['answerId'];\n            }\n\n            if (element['answerId'] > thisNewAnswerId) {\n              thisNewAnswerId = element['answerId'];\n            }\n          }\n        });\n        retArr = retArr.sort(function (a, b) {\n          return b[1] - a[1];\n        }); // this.setState( { answerBatch : retArr } )  // turning this off for a sec to make the main display\n        // show the most upvoted like it probably should be default\n        // ok, that worked.  be sure and either get rid of or change the fetchdata which is not doing\n        // anything now\n        // also have to get the next and previous working - they're not\n\n        _this3.setState({\n          oldestAnswerId: thisOldAnswerId\n        });\n\n        _this3.setState({\n          newestAnswerId: thisNewAnswerId\n        });\n      }).catch(function (error) {\n        console.log(\"error: \", error);\n      });\n    } // just for diagnostics \n\n  }, {\n    key: \"sleep\",\n    value: function sleep(milliseconds) {\n      var start = new Date().getTime();\n\n      for (var i = 0; i < 1e7; i++) {\n        document.getElementById('answerBox').scrollTop = 506;\n\n        if (new Date().getTime() - start > milliseconds) {\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"clearNextPrevBackground\",\n    value: function clearNextPrevBackground() {\n      document.getElementById('previousMainImage').setAttribute(\"style\", \"background-color: null;\");\n      document.getElementById('nextMainImage').setAttribute(\"style\", \"background-color: null;\");\n      document.getElementById('previousMainImage').removeAttribute(\"disabled\", \"true;\");\n      document.getElementById('nextMainImage').removeAttribute(\"disabled\", \"true;\");\n    } // dunno if this should be a separate function from fetchData or not, maybe combine later\n\n  }, {\n    key: \"fetchAnswer\",\n    value: function fetchAnswer(answerId, imageId, direction) {\n      var _this4 = this;\n\n      // (direction is 'next' or 'previous'\n      fetch(this.props.DATA_URI + \"/get_answer?imageId=\" + imageId + \"&answerId=\" + answerId + \"&direction=\" + direction, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json'\n        },\n        credentials: \"same-origin\"\n      }).then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        if (data.response === 'done') {\n          // do something to the next or previous button here\n          if (direction === 'next') {\n            document.getElementById('nextMainImage').setAttribute(\"style\", \"background-color: #636363;\");\n            document.getElementById('nextMainImage').setAttribute(\"disabled\", \"true;\");\n          }\n\n          if (direction === 'previous') {\n            document.getElementById('previousMainImage').setAttribute(\"style\", \"background-color: #636363;\");\n            document.getElementById('previousMainImage').setAttribute(\"disabled\", \"true;\");\n          }\n\n          return null;\n        } else {\n          _this4.clearNextPrevBackground();\n        }\n\n        var tempArr = _this4.state.answerBatch;\n\n        if (direction === 'next') {\n          tempArr.push([data[0]['answer'], data[0]['answerId'], data[0]['up'], data[0]['down']]);\n          tempArr.shift(); //  setTimeout(function() {\n          //    document.getElementById('answerBox').scrollTop = 506;\n          //  }, 500);\n        }\n\n        if (direction === 'previous') {\n          tempArr.splice(0, 0, [data[0]['answer'], data[0]['answerId'], data[0]['up'], data[0]['down']]);\n          tempArr.pop();\n        }\n\n        _this4.setState({\n          answerBatch: tempArr\n        });\n\n        if (direction === 'next') {\n          _this4.setState({\n            oldestAnswerId: data[0]['answerId']\n          });\n\n          _this4.setState({\n            newestAnswerId: tempArr[0][1]\n          });\n        }\n\n        if (direction === 'previous') {\n          _this4.setState({\n            newestAnswerId: data[0]['answerId']\n          });\n\n          _this4.setState({\n            oldestAnswerId: tempArr[9][1]\n          });\n        } //    if (this.state.scrollTimer) {\n        //      this.timer = setInterval(() => {\n        //        this.handleScroll();\n        //      }, 1000);\n        //      this.setState( { scrollTimer : false } );\n        //    }\n\n      }).catch(function (error) {\n        console.log(\"error: \", error);\n      });\n    }\n    /*\r\n    fetchPreviousAnswer(answerId, imageId) {\r\n      fetch( this.props.DATA_URI + \"/get_previous_answer?imageId=\" + imageId + \"&answerId=\" + answerId, { \r\n        credentials : \"same-origin\",\r\n        method: 'GET',\r\n        headers: {\r\n          'Accept': 'application/json',\r\n        }, \r\n      } )\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          if (data.response !== 'newest') {\r\n            let tempArr = this.state.answerBatch;\r\n            tempArr.splice(0,0,[data[0]['answer'], data[0]['answerId'], \r\n              data[0]['up'], data[0]['down']]);\r\n            tempArr.pop();\r\n            this.setState( { answerBatch : tempArr } );\r\n            this.setState( { newestAnswerId : data[0]['answerId'] } );\r\n            this.setState( { oldestAnswerId : tempArr[9][1] } );\r\n              if (this.state.scrollTimer) {\r\n              this.timer = setInterval(() => {\r\n                this.handleScroll();\r\n              }, 1000);\r\n              this.setState( { scrollTimer : false } );\r\n            }\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(\"error: \", error);\r\n        })\r\n    }\r\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var display = [];\n\n      if (Array.isArray(this.state.answerBatch)) {\n        if (this.state.answerBatch.length > 0) {\n          this.state.answerBatch.forEach(function (element) {\n            display.push(React.createElement(\"ul\", {\n              key: element[1],\n              className: \"Answer-list\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 297\n              },\n              __self: this\n            }, React.createElement(\"span\", {\n              className: \"The-Answer\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 297\n              },\n              __self: this\n            }, \"\\\"\", element[0], \"\\\"\"), React.createElement(\"span\", {\n              className: \"Up-Answer\",\n              onClick: _this5.handleUlClick,\n              thisanswerid: element[1],\n              vote: \"up\",\n              key: element[1] + 'upvote',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 298\n              },\n              __self: this\n            }, _this5.props.user.userId ? \"thumbup \" : null), React.createElement(\"span\", {\n              className: \"Up-Answer2\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 300\n              },\n              __self: this\n            }, \" \", element[2], \" up\"), React.createElement(\"span\", {\n              className: \"Down-Answer\",\n              onClick: _this5.handleUlClick,\n              thisanswerid: element[1],\n              vote: \"down\",\n              key: element[1] + 'downvote',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 301\n              },\n              __self: this\n            }, _this5.props.user.userId ? \"thumbdown \" : null), React.createElement(\"span\", {\n              className: \"Down-Answer2\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 303\n              },\n              __self: this\n            }, \" \", element[3], \" down\")));\n          });\n        }\n      }\n\n      var mostVotedDisplay = [];\n\n      if (Array.isArray(this.state.mostVotedAnswerBatch)) {\n        if (this.state.mostVotedAnswerBatch.length > 0) {\n          this.state.mostVotedAnswerBatch.forEach(function (element) {\n            mostVotedDisplay.push(React.createElement(\"ul\", {\n              key: element[1] + 'mostvoted',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 313\n              },\n              __self: this\n            }, element[0], React.createElement(\"div\", {\n              thisanswerid: element[1],\n              vote: \"up\",\n              key: element[1] + 'mostVote',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 314\n              },\n              __self: this\n            }, _this5.props.user.userId ? \"thumbup \" : null), React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 316\n              },\n              __self: this\n            }, \" \", element[2], \" up\"), React.createElement(\"div\", {\n              thisanswerid: element[1],\n              vote: \"down\",\n              key: element[1] + 'downvote',\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 317\n              },\n              __self: this\n            }, _this5.props.user.userId ? \"thumbdown \" : null), React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 319\n              },\n              __self: this\n            }, \" \", element[3], \" down\")));\n          });\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"Answer-box\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchAnswer(_this5.state.oldestAnswerId, _this5.props.image.imageId, 'next');\n        },\n        id: \"nextMainImage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"Next\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchAnswer(_this5.state.newestAnswerId, _this5.props.image.imageId, 'previous');\n        },\n        id: \"previousMainImage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328\n        },\n        __self: this\n      }, \"Previous\")), React.createElement(\"div\", {\n        className: \"Answer-box1\",\n        id: \"answerBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, display), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"answerBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchMost('netUp');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, \"Net Up\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchMost('netDown');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \"Net Down\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchMost('mostUp');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338\n        },\n        __self: this\n      }, \"Most Up\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchMost('mostDown');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 339\n        },\n        __self: this\n      }, \"Most Down\"), React.createElement(\"button\", {\n        onClick: function onClick() {\n          _this5.fetchMost('most');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 340\n        },\n        __self: this\n      }, \"Most\"), mostVotedDisplay));\n    }\n  }]);\n\n  return Answers;\n}(Component);\n\nexport default Answers;","map":{"version":3,"sources":["C:\\Users\\jayne\\dafuckisthis\\frontend\\src\\components\\Answers.js"],"names":["React","Component","Answers","props","handleUlClick","event","user","userId","fd","FormData","append","target","getAttribute","sessionvalue","fetch","DATA_URI","method","headers","credentials","body","then","response","json","data","buildBatch","catch","error","console","log","answerId","up","down","i","tempArr","state","answerBatch","forEach","element","parseInt","setState","handleScroll","document","getElementById","scrollHeight","offsetHeight","scrollTop","fetchAnswer","oldestAnswerId","image","imageId","newestAnswerId","clearInterval","timer","scrollTimer","mostVotedAnswerBatch","most","fetchData","fetchMost","answerToggle","type","endpoint","retArr","push","clearNextPrevBackground","thisOldAnswerId","thisNewAnswerId","sort","a","b","milliseconds","start","Date","getTime","setAttribute","removeAttribute","direction","shift","splice","pop","display","Array","isArray","length","mostVotedDisplay"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './MainPic.css';\r\n// import User from '../User';\r\n\r\nclass Answers extends Component {\r\n  constructor(props){\r\n    super(props);\r\n  //  var user = new User();\r\n    this.state = {\r\n      answerBatch : [], // [ [answer, answerId, up, down], ... ]\r\n      oldestAnswerId : 0,\r\n      newestAnswerId : 0,\r\n\t\t  mostVotedAnswerBatch : 0,\r\n      most : 'netUp',\r\n      scrollTimer : true,\r\n    //  userId : this.props.user.userId,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n//    document.getElementById('answerBox').addEventListener('scroll', this.handleScroll);\r\n   // if (this.props.image.imageId) {\r\n      // did this happen and with what image id when you first hit most answered\r\n    //  console.log(\"what imageid = \", this.props.image.imageId);\r\n      this.fetchData();\r\n      this.fetchMost(this.state.most);\r\n   // }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timer);\r\n //   ReactDOM.findDOMNode(this).addEventListener('scroll', this.handleScroll);\r\n  }\r\n  \r\n  componentWillReceiveProps(answerToggle) {\r\n    if (this.props.image.imageId) {\r\n\t  this.fetchData();\r\n\t  this.fetchMost(this.state.most); // this should probably be set in state\r\n    }\r\n  }\r\n\r\n  fetchMost(type) {\r\n    let endpoint;\r\n    if (type === 'netUp') { endpoint = '/get_most_net_upvoted'; }\r\n    if (type === 'netDown') { endpoint = '/get_most_net_downvoted'; }\r\n    if (type === 'mostUp') { endpoint = '/get_most_upvoted'; }\r\n    if (type === 'mostDown') { endpoint = '/get_most_downvoted'; }\r\n    if (type === 'most') { endpoint = '/get_most_voted'; }\r\n    let retArr = [];\r\n    fetch( this.props.DATA_URI + endpoint + \"?imageId=\" + this.props.image.imageId, {\r\n      method: 'GET',\r\n      headers: { 'Accept': 'application/json' },\r\n      credentials: 'same-origin',\r\n    })\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      data.forEach(function(element) {\r\n        retArr.push([element['answer'], element['answerId'], \r\n        element['up'], element['down']]);\r\n      });\r\n    //  this.setState( { mostVotedAnswerBatch : retArr } )\r\n      this.setState( { answerBatch : retArr } )\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error: \", error);\r\n      })\r\n  }\r\n  \r\n  fetchData() {\r\n    this.clearNextPrevBackground();\r\n    let retArr = [];\r\n    fetch( this.props.DATA_URI + \"/get_answers?imageId=\" + this.props.image.imageId + \"&answerId=\" + 0, { \r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      }, \r\n      credentials : \"same-origin\" \r\n      } )\r\n      .then(response => response.json())\r\n      .then(data =>  {\r\n         let thisOldAnswerId = 0;\r\n         let thisNewAnswerId = 0;\r\n         data.forEach(function(element) {\r\n           retArr.push([element['answer'], element['answerId'], \r\n              element['up'], element['down']]);\r\n\t     if (thisOldAnswerId === 0) {\r\n         thisOldAnswerId = element['answerId'];\r\n         thisNewAnswerId = element['answerId'];\r\n       } else {\r\n         if (element['answerId'] < thisOldAnswerId) {\r\n           thisOldAnswerId = element['answerId'];\r\n         }\r\n         if (element['answerId'] > thisNewAnswerId) {\r\n           thisNewAnswerId = element['answerId'];\r\n         }\r\n       }\r\n     });\r\n\t retArr = retArr.sort(function(a, b) {\r\n\t   return b[1] - a[1];\r\n\t });\r\n  // this.setState( { answerBatch : retArr } )  // turning this off for a sec to make the main display\r\n        // show the most upvoted like it probably should be default\r\n        // ok, that worked.  be sure and either get rid of or change the fetchdata which is not doing\r\n        // anything now\r\n        // also have to get the next and previous working - they're not\r\n   this.setState({ oldestAnswerId : thisOldAnswerId })\r\n   this.setState({ newestAnswerId : thisNewAnswerId })\r\n   })\r\n   .catch(error => {\r\n     console.log(\"error: \", error);\r\n   })\r\n  }\r\n  \r\n// just for diagnostics \r\n sleep(milliseconds) {\r\n  var start = new Date().getTime();\r\n  for (var i = 0; i < 1e7; i++) {\r\n    document.getElementById('answerBox').scrollTop = 506;\r\n    if ((new Date().getTime() - start) > milliseconds){\r\n      break;\r\n    }\r\n  }\r\n}\r\n\r\n  clearNextPrevBackground() {\r\n    document.getElementById('previousMainImage').setAttribute(\"style\", \"background-color: null;\");\r\n    document.getElementById('nextMainImage').setAttribute(\"style\", \"background-color: null;\");\r\n    document.getElementById('previousMainImage').removeAttribute(\"disabled\", \"true;\");\r\n    document.getElementById('nextMainImage').removeAttribute(\"disabled\", \"true;\");\r\n  }\r\n\r\n  // dunno if this should be a separate function from fetchData or not, maybe combine later\r\n  fetchAnswer(answerId, imageId, direction) {   // (direction is 'next' or 'previous'\r\n    fetch( this.props.DATA_URI + \"/get_answer?imageId=\" + imageId + \r\n      \"&answerId=\" + answerId + \"&direction=\" + direction, { \r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      }, \r\n      credentials : \"same-origin\" } )\r\n      .then(response => response.json())\r\n      .then(data =>  {\r\n        if (data.response === 'done') {\r\n          // do something to the next or previous button here\r\n          if (direction === 'next') {\r\n            document.getElementById('nextMainImage').setAttribute(\"style\", \"background-color: #636363;\");\r\n            document.getElementById('nextMainImage').setAttribute(\"disabled\", \"true;\");\r\n          }\r\n          if (direction === 'previous') {\r\n            document.getElementById('previousMainImage').setAttribute(\"style\", \"background-color: #636363;\");\r\n            document.getElementById('previousMainImage').setAttribute(\"disabled\", \"true;\");\r\n          }\r\n          return null;\r\n        } else {\r\n          this.clearNextPrevBackground();\r\n        }\r\n\r\n\t      let tempArr = this.state.answerBatch;\r\n        if (direction === 'next') {\r\n\t        tempArr.push([data[0]['answer'], data[0]['answerId'],\r\n            data[0]['up'], data[0]['down']]);\r\n\t        tempArr.shift();\r\n        //  setTimeout(function() {\r\n        //    document.getElementById('answerBox').scrollTop = 506;\r\n        //  }, 500);\r\n        }\r\n        if (direction === 'previous') {\r\n          tempArr.splice(0,0,[data[0]['answer'], data[0]['answerId'], \r\n            data[0]['up'], data[0]['down']]);\r\n          tempArr.pop();\r\n        }\r\n\t      this.setState( { answerBatch : tempArr } );\r\n        if (direction === 'next') {\r\n\t        this.setState( { oldestAnswerId : data[0]['answerId'] } );\r\n          this.setState( { newestAnswerId : tempArr[0][1] } );\r\n        }\r\n        if (direction === 'previous') {\r\n          this.setState( { newestAnswerId : data[0]['answerId'] } );\r\n          this.setState( { oldestAnswerId : tempArr[9][1] } );\r\n        }\r\n    //    if (this.state.scrollTimer) {\r\n    //      this.timer = setInterval(() => {\r\n    //        this.handleScroll();\r\n    //      }, 1000);\r\n    //      this.setState( { scrollTimer : false } );\r\n    //    }\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error: \", error);\r\n      })\r\n  }\r\n\r\n  /*\r\n  fetchPreviousAnswer(answerId, imageId) {\r\n    fetch( this.props.DATA_URI + \"/get_previous_answer?imageId=\" + imageId + \"&answerId=\" + answerId, { \r\n      credentials : \"same-origin\",\r\n      method: 'GET',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n      }, \r\n    } )\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.response !== 'newest') {\r\n          let tempArr = this.state.answerBatch;\r\n          tempArr.splice(0,0,[data[0]['answer'], data[0]['answerId'], \r\n            data[0]['up'], data[0]['down']]);\r\n          tempArr.pop();\r\n          this.setState( { answerBatch : tempArr } );\r\n          this.setState( { newestAnswerId : data[0]['answerId'] } );\r\n          this.setState( { oldestAnswerId : tempArr[9][1] } );\r\n\r\n          if (this.state.scrollTimer) {\r\n            this.timer = setInterval(() => {\r\n              this.handleScroll();\r\n            }, 1000);\r\n            this.setState( { scrollTimer : false } );\r\n          }\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error: \", error);\r\n      })\r\n  }\r\n  */\r\n\r\n  handleUlClick = (event) => {\r\n    if (this.props.user.userId) {\r\n      const fd = new FormData();\r\n      fd.append('answer_id', event.target.getAttribute('thisanswerid'));\r\n      fd.append('vote', event.target.getAttribute('vote'));\r\n      fd.append('user_id', this.props.user.userId);\r\n      fd.append('sessionvalue', this.props.user.sessionvalue);\r\n      fetch( this.props.DATA_URI + '/vote', {\r\n        method: 'POST',\r\n        headers: {\r\n        'Accept': 'application/json',\r\n        },\r\n        credentials : 'same-origin',\r\n        body: fd\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.buildBatch(data['answer_id'], data['up'], data['down'])\r\n      })\r\n      .catch(error => {\r\n        console.log(\"error: \", error);\r\n      });\r\n    }\r\n  }\r\n  \r\n  buildBatch = (answerId, up, down) => {\r\n    let i = 0;\r\n    let tempArr = this.state.answerBatch;\r\n    this.state.answerBatch.forEach( function(element) {\r\n\t  if (element[1] === parseInt(answerId)) {\r\n\t\ttempArr[i][2] = up;\r\n        tempArr[i][3] = down;\r\n      }\r\n\t  i++;\r\n    });\r\n    this.setState({ answerBatch : tempArr });\r\n  }\r\n\r\n  /*\r\n  handleScroll = (event) => {\r\n    console.log(\"hwkhj\");\r\n     if (ReactDOM.findDOMNode(this).scrollHeight - ReactDOM.findDOMNode(this).offsetHeight - 1 < ReactDOM.findDOMNode(this).scrollTop) {\r\n       this.fetchNextAnswer(this.state.oldestAnswerId, this.props.imageId);\r\n     } else if (ReactDOM.findDOMNode(this).scrollTop === 0) {\r\n       this.fetchPreviousAnswer(this.state.newestAnswerId, this.props.imageId);\r\n     } else {\r\n       clearInterval(this.timer);\r\n       this.setState( { scrollTimer : true } );\r\n     }\r\n  }\r\n  */\r\n  //  document.getElementById('answerBox').addEventListener('scroll', this.handleScroll);\r\n\r\n  handleScroll = (event) => {\r\n     if (document.getElementById('answerBox').scrollHeight - document.getElementById('answerBox').offsetHeight === document.getElementById('answerBox').scrollTop) {\r\n       this.fetchAnswer(this.state.oldestAnswerId, this.props.image.imageId, 'next');\r\n     } else if (document.getElementById('answerBox').scrollTop === 0) {\r\n       this.fetchAnswer(this.state.newestAnswerId, this.props.image.imageId, 'previous');\r\n     } else {\r\n       clearInterval(this.timer);\r\n       this.setState( { scrollTimer : true } );\r\n     }\r\n  }\r\n\r\n  render() {\r\n    let display = [];\r\n    if (Array.isArray(this.state.answerBatch)) {\r\n      if (this.state.answerBatch.length > 0) {\r\n        this.state.answerBatch.forEach((element) => {\r\n           display.push(\r\n             <ul key={element[1]} className=\"Answer-list\"><span className=\"The-Answer\">\"{element[0]}\"</span>\r\n             <span className=\"Up-Answer\" onClick={this.handleUlClick} thisanswerid={element[1]} vote=\"up\"\r\n\t\t\t\tkey={element[1] + 'upvote'}>{ this.props.user.userId ? \"thumbup \" : null }</span>\r\n\t\t\t\t<span className=\"Up-Answer2\"> { element[2] } up</span>\r\n\t\t\t<span className=\"Down-Answer\" onClick={this.handleUlClick} thisanswerid={element[1]} vote='down'\r\n\t\t\t\tkey={element[1] + 'downvote'}>{ this.props.user.userId ? \"thumbdown \" : null }</span>\r\n\t\t\t\t<span className=\"Down-Answer2\"> { element[3] } down</span>\t\r\n             </ul>);\r\n        });\r\n      }\r\n    }\r\n    let mostVotedDisplay = []\r\n\tif (Array.isArray(this.state.mostVotedAnswerBatch)) {\r\n\t\tif (this.state.mostVotedAnswerBatch.length > 0) {\r\n\t\t\tthis.state.mostVotedAnswerBatch.forEach((element) => {\r\n\t\t\t\tmostVotedDisplay.push(\r\n\t\t\t\t\t<ul key={element[1] + 'mostvoted'}>{element[0]}\r\n\t\t\t<div thisanswerid={element[1]} vote='up'\r\n\t\t\t\tkey={element[1] + 'mostVote'}>{ this.props.user.userId ? \"thumbup \" : null }</div>\r\n\t\t\t\t<div> { element[2] } up</div>\r\n\t\t\t<div thisanswerid={element[1]} vote='down'\r\n\t\t\t\tkey={element[1] + 'downvote'}>{ this.props.user.userId ? \"thumbdown \" : null }</div>\r\n\t\t\t\t<div> { element[3] } down</div>\r\n\t\t\t\t</ul>);\r\n\t\t});\r\n\t  }\r\n\t}\r\n\t\r\n    return(\r\n\t<div className=\"Answer-box\"><center>\r\n      <button onClick={() => {this.fetchAnswer(this.state.oldestAnswerId, this.props.image.imageId, 'next')}} id=\"nextMainImage\">Next</button>\r\n      <button onClick={() => {this.fetchAnswer(this.state.newestAnswerId, this.props.image.imageId, 'previous')}} id=\"previousMainImage\">Previous</button>\r\n      </center>\r\n          <div className=\"Answer-box1\" id=\"answerBox\">\r\n          { display }\r\n\t\t  </div>\r\n\t\t\t<br />\r\n\t\t\t<br />\r\n\t\t\t<div className=\"answerBox\">\r\n     <button onClick={() => {this.fetchMost('netUp')}}>Net Up</button>\r\n     <button onClick={() => {this.fetchMost('netDown')}}>Net Down</button>\r\n     <button onClick={() => {this.fetchMost('mostUp')}}>Most Up</button>\r\n     <button onClick={() => {this.fetchMost('mostDown')}}>Most Down</button>\r\n     <button onClick={() => {this.fetchMost('most')}}>Most</button>\r\n\t\t\t{ mostVotedDisplay }\r\n          </div>\r\n\t\t  </div>\r\n\t);\r\n    }\r\n}\r\n\r\nexport default Answers \r\n"]},"metadata":{},"sourceType":"module"}